{
  "swagger": "2.0",
  "info": {
    "version": "3.0",
    "title": "Microsoft Bot Connector API - v3.0",
    "description": "The Bot Connector REST API allows your bot to send and receive messages to channels configured in the\r\n[Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST\r\nand JSON over HTTPS.\r\n\r\nClient libraries for this REST API are available. See below for a list.\r\n\r\nMany bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The\r\nBot State REST API allows a bot to store and retrieve state associated with users and conversations.\r\n\r\nAuthentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is\r\ndescribed in detail in the [Connector Authentication](/en-us/restapi/authentication) document.\r\n\r\n# Client Libraries for the Bot Connector REST API\r\n\r\n* [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)\r\n* [Bot Builder for Node.js](/en-us/node/builder/overview/)\r\n* Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)\r\n\r\nÂ© 2016 Microsoft",
    "termsOfService": "https://www.microsoft.com/en-us/legal/intellectualproperty/copyright/default.aspx",
    "contact": {
      "name": "Bot Framework",
      "url": "https://botframework.com",
      "email": "botframework@microsoft.com"
    },
    "license": {
      "name": "The MIT License (MIT)",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "api.botframework.com",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "bearer_auth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Access Token to authenticate calls to the Bot Connector Service."
    }
  },
  "security": [
    {
      "bearer_auth": []
    }
  ],
  "paths": {
    "/v3/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "summary": "GetAttachmentInfo",
        "description": "Gets information about the specified attachment, including file name, type, and the available views (e.g., original or thumbnail).",
        "operationId": "Attachments_GetAttachmentInfo",
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An attachmentInfo object is returned which describes the:\r\n* type of the attachment\r\n* name of the attachment\r\n\r\n\r\nand an array of views:\r\n* Size - size of the object\r\n* ViewId - View Id which can be used to fetch a variation on the content (ex: original or thumbnail)",
            "schema": {
              "$ref": "#/definitions/AttachmentInfo"
            }
          },
          "default": {
            "description": "The request was malformed or otherwise incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get an Attachment's Info": {
            "$ref": "./examples/attachments/GetAttachmentInfo.json"
          }
        }
      }
    },
    "/v3/attachments/{attachmentId}/views/{viewId}": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "summary": "GetAttachment",
        "description": "Gets the specified view of the specified attachment as binary content.",
        "operationId": "Attachments_GetAttachment",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewId",
            "in": "path",
            "description": "View ID from attachmentInfo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Binary content that represents the specified view of the specified attachment.",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          },
          "301": {
            "description": "The Location header describes where the content is now."
          },
          "302": {
            "description": "The Location header describes where the content is now."
          },
          "default": {
            "description": "The request was malformed or otherwise incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Retrieve the attachment's content.": {
            "$ref": "./examples/attachments/GetAttachmentView.json"
          }
        }
      }
    },
    "/v3/conversations": {
      "post": {
        "tags": [
          "Conversations"
        ],
        "summary": "CreateConversation",
        "description": "Create a new Conversation.\r\n\r\nPOST to this method with a\r\n* Bot being the bot creating the conversation\r\n* IsGroup set to true if this is not a direct message (default is false)\r\n* Members array containing the members you want to have be in the conversation.\r\n\r\nThe return value is a ResourceResponse which contains a conversation id which is suitable for use\r\nin the message payload and REST API uris.\r\n\r\nMost channels only support the semantics of bots initiating a direct message conversation.  An example of how to do that would be:\r\n\r\n```\r\nvar resource = await connector.conversations.CreateConversation(new ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new ChannelAccount(\"user1\") } );\r\nawait connect.Conversations.SendToConversationAsync(resource.Id, new Activity() ... ) ;\r\n\r\n```",
        "operationId": "Conversations_CreateConversation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "description": "Parameters to create the conversation from.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConversationParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object will be returned containing \r\n* the ID for the conversation\r\n* ActivityId for the activity if provided.  If ActivityId is null then the channel doesn't support returning resource id's for activity.",
            "schema": {
              "$ref": "#/definitions/ConversationResourceResponse"
            }
          },
          "201": {
            "description": "An object will be returned containing \r\n* the ID for the conversation\r\n* ActivityId for the activity if provided.  If ActivityId is null then the channel doesn't support returning resource id's for activity.",
            "schema": {
              "$ref": "#/definitions/ConversationResourceResponse"
            }
          },
          "202": {
            "description": "An object will be returned containing \r\n* the ID for the conversation\r\n* ActivityId for the activity if provided.  If ActivityId is null then the channel doesn't support returning resource id's for activity.",
            "schema": {
              "$ref": "#/definitions/ConversationResourceResponse"
            }
          },
          "default": {
            "description": "The request was malformed or otherwise incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Create a new Conversation.": {
            "$ref": "./examples/conversations/CreateConversation.json"
          }
        }
      }
    },
    "/v3/conversations/{conversationId}/activities": {
      "post": {
        "tags": [
          "Conversations"
        ],
        "summary": "SendToConversation",
        "description": "This method allows you to send an activity to the end of a conversation.\r\n\r\nThis is slightly different from ReplyToActivity.\r\n* SendToConversation - will append the activity to the end of the conversation according to the timestamp or semantics of the channel.\r\n* ReplyToActivity - adds the activity as a reply to another activity, if the channel supports it. If the channel does not support nested replies, ReplyToActivity falls back to SendToConversation.\r\n\r\nUse ReplyToActivity when replying to a specific activity in the conversation.\r\n\r\nUse SendToConversation in all other cases.",
        "operationId": "Conversations_SendToConversation",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity",
            "in": "body",
            "description": "Activity to send.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object will be returned containing the ID for the resource.",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "201": {
            "description": "A ResourceResponse object will be returned containing the ID for the resource.",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "202": {
            "description": "An object will be returned containing the ID for the resource.",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "default": {
            "description": "The request was malformed or otherwise incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Send a new Activity to a Conversation.": {
            "$ref": "./examples/conversations/SendToConversation.json"
          }
        }
      }
    },
    "/v3/conversations/{conversationId}/activities/{activityId}": {
      "put": {
        "tags": [
          "Conversations"
        ],
        "summary": "UpdateActivity",
        "description": "Edit an existing activity.\r\n\r\nSome channels allow you to edit an existing activity to reflect the new state of a bot conversation.\r\n\r\nFor example, you might remove buttons from a message in the conversation after the user has clicked one of the buttons. If successful, this operation updates the specified activity within the specified conversation.",
        "operationId": "Conversations_UpdateActivity",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "Activity Id to update.",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity",
            "in": "body",
            "description": "replacement Activity.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object will be returned containing the ID for the resource.",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "201": {
            "description": "A ResourceResponse object will be returned containing the ID for the resource.",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "202": {
            "description": "An object will be returned containing the ID for the resource.",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "default": {
            "description": "The request was malformed or otherwise incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Update an Activity.": {
            "$ref": "./examples/conversations/UpdateActivity.json"
          }
        }
      },
      "post": {
        "tags": [
          "Conversations"
        ],
        "summary": "ReplyToActivity",
        "description": "This method allows you to reply to an activity.\r\n\r\nThis is slightly different from SendToConversation().\r\n* SendToConversation - will append the activity to the end of the conversation according to the timestamp or semantics of the channel.\r\n* ReplyToActivity - adds the activity as a reply to another activity, if the channel supports it. If the channel does not support nested replies, ReplyToActivity falls back to SendToConversation.\r\n\r\nUse ReplyToActivity when replying to a specific activity in the conversation.\r\n\r\nUse SendToConversation in all other cases.",
        "operationId": "Conversations_ReplyToActivity",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "ID of the activity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "activity",
            "in": "body",
            "description": "Activity to send.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object will be returned containing the ID for the resource.",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "201": {
            "description": "A ResourceResponse object will be returned containing the ID for the resource.",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "202": {
            "description": "An object will be returned containing the ID for the resource.",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "default": {
            "description": "The request was malformed or otherwise incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Reply to Activity.": {
            "$ref": "./examples/conversations/ReplyToActivity.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Conversations"
        ],
        "summary": "DeleteActivity",
        "description": "Delete an existing activity.\r\n\r\nSome channels allow you to delete an existing activity. If successful, this operation removes the specified activity from the specified conversation.",
        "operationId": "Conversations_DeleteActivity",
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "ID of activity to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation succeeded, there is no response."
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed"
          },
          "default": {
            "description": "The request was malformed or otherwise incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Delete an activity from Conversation.": {
            "$ref": "./examples/conversations/DeleteActivity.json"
          }
        }
      }
    },
    "/v3/conversations/{conversationId}/members": {
      "get": {
        "tags": [
          "Conversations"
        ],
        "summary": "GetConversationMembers",
        "description": "Enumerate the members of a conversation.\r\n\r\nThis REST API takes a Conversation ID and returns an array of ChannelAccount objects representing the members of the conversation.",
        "operationId": "Conversations_GetConversationMembers",
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of ChannelAccount objects.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelAccount"
              }
            }
          },
          "default": {
            "description": "The request was malformed or otherwise incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Members of a Conversation.": {
            "$ref": "./examples/conversations/GetConversationMembers.json"
          }
        }
      }
    },
    "/v3/conversations/{conversationId}/activities/{activityId}/members": {
      "get": {
        "tags": [
          "Conversations"
        ],
        "summary": "GetActivityMembers",
        "description": "Enumerate the members of an activity.\r\n\r\nThis REST API takes a Conversation ID and an Activity ID, returning an array of ChannelAccount objects representing the members of the particular activity in the conversation.",
        "operationId": "Conversations_GetActivityMembers",
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "path",
            "description": "Activity ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of ChannelAccount objects.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelAccount"
              }
            }
          },
          "default": {
            "description": "The request was malformed or otherwise incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Members of an Activity.": {
            "$ref": "./examples/conversations/GetActivityMembers.json"
          }
        }
      }
    },
    "/v3/conversations/{conversationId}/attachments": {
      "post": {
        "tags": [
          "Conversations"
        ],
        "summary": "UploadAttachment",
        "description": "Upload an attachment directly into a channel's blob storage.\r\n\r\nThis is useful because it allows you to store data in a compliant store when dealing with enterprises.\r\n\r\nThe response is a ResourceResponse which contains an Attachment ID which is suitable for using with the attachments API.",
        "operationId": "Conversations_UploadAttachment",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "attachmentUpload",
            "in": "body",
            "description": "Attachment data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttachmentData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object will be returned containing the ID for the resource.",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "201": {
            "description": "A ResourceResponse object will be returned containing the ID for the resource.",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "202": {
            "description": "An object will be returned containing the ID for the resource.",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "default": {
            "description": "The request was malformed or otherwise incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Upload an Attachment.": {
            "$ref": "./examples/attachments/UploadAttachment.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AttachmentInfo": {
      "description": "Metadata for an attachment.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the attachment.",
          "type": "string"
        },
        "type": {
          "description": "ContentType of the attachment.",
          "type": "string"
        },
        "views": {
          "description": "attachment views.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentView"
          }
        }
      }
    },
    "AttachmentView": {
      "description": "Attachment View name and size.",
      "type": "object",
      "properties": {
        "viewId": {
          "description": "View ID.",
          "type": "string"
        },
        "size": {
          "format": "int32",
          "description": "Size of the file.",
          "type": "integer"
        }
      }
    },
    "ErrorResponse": {
      "description": "An HTTP API response.",
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error",
          "description": "Error message."
        }
      }
    },
    "Error": {
      "description": "Object representing error information.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code.",
          "type": "string",
          "enum": [ "400", "401", "403", "404", "405", "429", "500", "503" ],
          "x-ms-enum": {
            "name": "ErrorCode",
            "modelAsString": true,
            "values": [
              {
                "value": "400",
                "description": "The request was malformed or otherwise incorrect. Inspect the message for a more detailed description."
              },
              {
                "value": "401",
                "description": "The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password."
              },
              {
                "value": "403",
                "description": "The bot is not authorized to make this request. Please check your Microsoft App ID and Microsoft App Password."
              },
              {
                "value": "404",
                "description": "The resource was not found."
              },
              {
                "value": "405",
                "description": "The method and URI you are trying to use is not allowed on this service.  For example, not all services support the DELETE or PUT verbs on an activity URI."
              },
              {
                "value": "429",
                "description": "Too many requests have been submitted to this API. This error may be accompanied by a Retry-After header, which includes the suggested retry interval."
              },
              {
                "value": "500",
                "description": "An internal server has occurred. Inspect the message for a more detailed description."
              },
              {
                "value": "503",
                "description": "The service you are trying to communicate with is unavailable."
              }
            ]
          }
        },
        "message": {
          "description": "A description of the error.",
          "type": "string"
        }
      }
    },
    "ConversationParameters": {
      "description": "Parameters for creating a new conversation.",
      "type": "object",
      "properties": {
        "isGroup": {
          "description": "Indicates if this is a group conversation.",
          "type": "boolean"
        },
        "bot": {
          "$ref": "#/definitions/ChannelAccount",
          "description": "The bot address for this conversation."
        },
        "members": {
          "description": "Members to add to the conversation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelAccount"
          }
        },
        "topicName": {
          "description": "(Optional) Topic title of a conversation (if supported by the channel).",
          "type": "string"
        },
        "activity": {
          "$ref": "#/definitions/Activity",
          "description": "(Optional) Use this activity as the initial message to the conversation when creating a new conversation."
        },
        "channelData": {
          "type": "object",
          "description": "Channel specific payload for creating the conversation."
        }
      }
    },
    "ChannelAccount": {
      "description": "Channel account information needed to route a message.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Channel id for the user or bot on this channel (Example: joe@smith.com, or @joesmith or 123456).",
          "type": "string"
        },
        "name": {
          "description": "Display friendly name.",
          "type": "string"
        }
      }
    },
    "Activity": {
      "description": "An Activity is the basic communication type for the Bot Framework 3.0 protocol.",
      "type": "object",
      "required": ["type", "recipient"],
      "properties": {
        "type": {
          "$ref": "#/definitions/ActivityType",
          "description": "The type of the activity."
        },
        "id": {
          "description": "ID that uniquely identifies the activity on the channel.",
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Date and time that the message was sent in the UTC time zone (set by service).",
          "type": "string"
        },
        "localTimestamp": {
          "format": "date-time",
          "description": "Date and time that the message was sent in the local time zone (set by client).",
          "type": "string"
        },
        "serviceUrl": {
          "description": "Service endpoint where operations concerning the activity may be performed.",
          "type": "string"
        },
        "channelId": {
          "description": "ID of the channel where the activity was sent.",
          "type": "string"
        },
        "from": {
          "$ref": "#/definitions/ChannelAccount",
          "description": "Sender address."
        },
        "conversation": {
          "$ref": "#/definitions/ConversationAccount",
          "description": "Channel account information."
        },
        "recipient": {
          "$ref": "#/definitions/ChannelAccount",
          "description": "(Outbound to bot only) Bot's address that received the message."
        },
        "textFormat": {
          "description": "Format of text fields. Default: markdown.",
          "type": "string",
          "enum": [ "markdown", "plain", "xml" ],
          "default": "markdown",
          "x-ms-enum": {
            "name": "TextFormat"
          }
        },
        "attachmentLayout": {
          "description": "Hint for how to deal with multiple attachments: [list|carousel] Default: list.",
          "type": "string",
          "enum": [ "list", "carousel" ],
          "default": "list",
          "x-ms-enum": {
            "name": "AttachmentLayout",
            "values": [
              {
                "value": "list",
                "description": "Display multiple rich cards in carousel format."
              },
              {
                "value": "carousel",
                "description": "Display multiple rich cards in carousel format. If the channel does not support carousel format, it will display the rich cards in list format."
              }
            ]
          }

        },
        "membersAdded": {
          "description": "Members added to the conversation. Present only if activity type is \"conversationUpdate\" and users joined the conversation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelAccount"
          }
        },
        "membersRemoved": {
          "description": "Members removed from the conversation. Present only if activity type is \"conversationUpdate\" and users joined the conversation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelAccount"
          }
        },
        "reactionsAdded": {
          "description": "Reactions added to the activity.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageReaction"
          }
        },
        "reactionsRemoved": {
          "description": "Reactions removed from the activity.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageReaction"
          }
        },
        "topicName": {
          "description": "The conversation's updated topic name.",
          "type": "string"
        },
        "historyDisclosed": {
          "description": "True if prior history of the channel is disclosed. Default value is false.",
          "type": "boolean"
        },
        "locale": {
          "description": "Locale of the language that should be used to display text within the message.",
          "type": "string"
        },
        "text": {
          "description": "Content for the message.",
          "type": "string"
        },
        "speak": {
          "description": "SSML Speak for TTS audio response.",
          "type": "string"
        },
        "inputHint": {
          "description": "Value that indicates whether your bot is accepting, expecting, or ignoring user input after the message is delivered to the client.",
          "type": "string",
          "enum": [ "acceptingInput", "expectingInput", "ignoringInput"],
          "x-ms-enum": {
            "name": "InputHint"
          }
        },
        "summary": {
          "description": "Text to display if the channel cannot render cards.",
          "type": "string"
        },
        "suggestedActions": {
          "$ref": "#/definitions/SuggestedActions",
          "description": "SuggestedActions are used to provide keyboard/quick-reply like behavior in many clients."
        },
        "attachments": {
          "description": "List of Attachments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "entities": {
          "description": "Collection of Entity objects, each of which contains metadata about this activity. Each Entity object is typed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Entity"
          }
        },
        "channelData": {
          "type": "object",
          "description": "Channel-specific payload."
        },
        "action": {
          "description": "The action to apply or that was applied.\r\n\r\nUse the type property to determine context for the action. For example, if type is contactRelationUpdate, the value of the action property would be add if the user added your bot to their contacts list, or remove if they removed your bot from their contacts list.",
          "type": "string"
        },
        "replyToId": {
          "description": "The original ID this message is a response to.",
          "type": "string"
        },
        "value": {
          "type": "object",
          "description": "Open-ended value."
        },
        "name": {
          "description": "Name of the operation to invoke or the name of the event.",
          "type": "string"
        },
        "relatesTo": {
          "$ref": "#/definitions/ConversationReference",
          "description": "Reference to another conversation or activity."
        },
        "code": {
          "description": "Code indicating why the conversation has ended.",
          "type": "string"
        }
      }
    },
    "ActivityType": {
      "description": "The type of the activity.",
      "type": "string",
      "enum": [
        "message", "contactRelationUpdate", "conversationUpdate", "typing", "endOfConversation", "event", "invoke"
      ],
      "x-ms-enum": {
        "name": "ActivityType",
        "values": [
          {
            "value": "message",
            "description": "Represents a communication between bot and user."
          },
          {
            "value": "conversationUpdate",
            "description": "Indicates that the bot was added to a conversation, other members were added to or removed from the conversation, or conversation metadata has changed."
          },
          {
            "value": "contactRelationUpdate",
            "description": "Indicates that the bot was added or removed from a user's contact list."
          },
          {
            "value": "typing",
            "description": "Indicates that the user or bot on the other end of the conversation is compiling a response."
          },
          {
            "value": "endOfConversation",
            "description": "Indicates the end of a conversation."
          },
          {
            "value": "event",
            "description": "Represents a communication sent to a bot that is not visible to the user."
          },
          {
            "value": "invoke",
            "description": "Represents a communication sent to a bot to request that it perform a specific operation. This activity type is reserved for internal use by the Microsoft Bot Framework."
          }
        ]
      }
    },
    "ConversationAccount": {
      "description": "Channel account information for a conversation.",
      "type": "object",
      "properties": {
        "isGroup": {
          "description": "Is this a reference to a group.",
          "default": false,
          "type": "boolean"
        },
        "id": {
          "description": "The ID that identifies the conversation. The ID is unique per channel. If the channel starts the conversion, it sets this ID; otherwise, the bot sets this property to the ID that it gets back in the response when it starts the conversation (Example: joe@smith.com, or @joesmith or 123456).",
          "type": "string"
        },
        "name": {
          "description": "A display name that can be used to identify the conversation.",
          "type": "string"
        }
      }
    },
    "MessageReaction": {
      "description": "Message reaction object.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Message reaction type.",
          "type": "string"
        }
      }
    },
    "SuggestedActions": {
      "description": "SuggestedActions that can be performed.",
      "type": "object",
      "properties": {
        "to": {
          "description": "Ids of the recipients that the actions should be shown to. These Ids are relative to the channelId and a subset of all recipients of the activity.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "actions": {
          "description": "Actions that can be shown to the user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardAction"
          }
        }
      }
    },
    "Attachment": {
      "description": "An attachment within an activity.",
      "type": "object",
      "properties": {
        "contentType": {
          "description": "mimetype/Contenttype for the file.",
          "type": "string"
        },
        "contentUrl": {
          "description": "URL for the content of the attachment. Supported protocols are: HTTP, HTTPS, File, and Data.",
          "type": "string"
        },
        "content": {
          "type": "object",
          "description": "Embedded content."
        },
        "name": {
          "description": "(OPTIONAL) The name of the attachment.",
          "type": "string"
        },
        "thumbnailUrl": {
          "description": "(OPTIONAL) URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl.",
          "type": "string"
        }
      }
    },
    "Entity": {
      "description": "Object of schema.org types.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Entity Type (typically from schema.org types).",
          "type": "string"
        }
      }
    },
    "ConversationReference": {
      "description": "An object relating to a particular point in a conversation.",
      "type": "object",
      "properties": {
        "activityId": {
          "description": "(Optional) ID of the activity to refer to.",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/ChannelAccount",
          "description": "(Optional) User participating in this conversation."
        },
        "bot": {
          "$ref": "#/definitions/ChannelAccount",
          "description": "Bot participating in this conversation."
        },
        "conversation": {
          "$ref": "#/definitions/ConversationAccount",
          "description": "Conversation reference."
        },
        "channelId": {
          "description": "An ID that uniquely identifies the channel in the conversation that this object references.",
          "type": "string"
        },
        "serviceUrl": {
          "description": "Service endpoint where operations concerning the referenced conversation may be performed.",
          "type": "string"
        }
      }
    },
    "CardAction": {
      "description": "A clickable action.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of action implemented by this button.",
          "type": "string"
        },
        "title": {
          "description": "Text description which appears on the button.",
          "type": "string"
        },
        "image": {
          "description": "Image URL which will appear on the button, next to text label.",
          "type": "string"
        },
        "text": {
          "description": "Text for this action.",
          "type": "string"
        },
        "displayText": {
          "description": "(Optional) text to display in the chat feed if the button is clicked.",
          "type": "string"
        },
        "value": {
          "type": "object",
          "description": "Supplementary parameter for action. Content of this property depends on the ActionType."
        }
      }
    },
    "ConversationResourceResponse": {
      "description": "A response containing a resource.",
      "type": "object",
      "properties": {
        "activityId": {
          "description": "ID of the Activity (if sent).",
          "type": "string"
        },
        "serviceUrl": {
          "description": "Service endpoint where operations concerning the conversation may be performed.",
          "type": "string"
        },
        "id": {
          "description": "Id of the resource.",
          "type": "string"
        }
      }
    },
    "ResourceResponse": {
      "description": "A response containing a resource ID.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the resource.",
          "type": "string"
        }
      }
    },
    "AttachmentData": {
      "description": "Attachment data.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Content-Type of the attachment.",
          "type": "string"
        },
        "name": {
          "description": "Name of the attachment.",
          "type": "string"
        },
        "originalBase64": {
          "format": "byte",
          "description": "Attachment content.",
          "type": "string"
        },
        "thumbnailBase64": {
          "format": "byte",
          "description": "Attachment thumbnail.",
          "type": "string"
        }
      }
    },
    "CardContentType": {
      "description": "Available Content-Types for Cards.",
      "type": "string",
      "enum": ["application/vnd.microsoft.card.keyboard", "application/vnd.microsoft.card.thumbnail", "application/vnd.microsoft.card.hero", "application/vnd.microsoft.card.receipt", "application/vnd.microsoft.card.signin", "application/vnd.microsoft.card.animation", "application/vnd.microsoft.card.audio", "application/vnd.microsoft.card.video", "application/vnd.microsoft.card.payment"],
      "x-ms-enum": {
        "name": "CardContentType",
        "values": [
          {
            "value": "application/vnd.microsoft.card.keyboard",
            "name": "Keyboard",
            "description": "Content-Type for a Keyboard card."
          },
          {
            "value": "application/vnd.microsoft.card.thumbnail",
            "name": "Thumbnail",
            "description": "Content-Type for a Thumbnail card."
          },
          {
            "value": "application/vnd.microsoft.card.hero",
            "name": "Hero",
            "description": "Content-Type for a Hero card."
          },
          {
            "value": "application/vnd.microsoft.card.receipt",
            "name": "Receipt",
            "description": "Content-Type for a Receipt card."
          },
          {
            "value": "application/vnd.microsoft.card.signin",
            "name": "SignIn",
            "description": "Content-Type for a Signin card."
          },
          {
            "value": "application/vnd.microsoft.card.animation",
            "name": "Animation",
            "description": "Content-Type for an Animation card."
          },
          {
            "value": "application/vnd.microsoft.card.audio",
            "name": "Audio",
            "description": "Content-Type for an Audio card."
          },
          {
            "value": "application/vnd.microsoft.card.video",
            "name": "Video",
            "description": "Content-Type for a Video card."
          },
          {
            "value": "application/vnd.microsoft.card.payment",
            "name": "Payment",
            "description": "Content-Type for a Payment card."
          }
        ]
      }
    },
    "HeroCard": {
      "description": "A Hero card (card with a single, large image).",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the card.",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the card.",
          "type": "string"
        },
        "text": {
          "description": "Text for the card.",
          "type": "string"
        },
        "images": {
          "description": "Array of images for the card.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardImage"
          }
        },
        "buttons": {
          "description": "Set of actions applicable to the current card.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardAction"
          }
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "This action will be activated when user taps on the card itself."
        }
      }
    },
    "CardImage": {
      "description": "An image on a card.",
      "type": "object",
      "properties": {
        "url": {
          "description": "URL Thumbnail image for major content property.",
          "type": "string"
        },
        "alt": {
          "description": "Image description intended for screen readers.",
          "type": "string"
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "Action assigned to specific Attachment. E.g.navigate to specific URL or play/open media content."
        }
      }
    },
    "ThumbnailCard": {
      "description": "A thumbnail card (card with a single, small thumbnail image).",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the card.",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the card.",
          "type": "string"
        },
        "text": {
          "description": "Text for the card.",
          "type": "string"
        },
        "images": {
          "description": "Array of images for the card.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardImage"
          }
        },
        "buttons": {
          "description": "Set of actions applicable to the current card.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardAction"
          }
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "This action will be activated when user taps on the card itself."
        }
      }
    },
    "ReceiptCard": {
      "description": "A receipt card.",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title displayed at the top of the receipt.",
          "type": "string"
        },
        "items": {
          "description": "Array of Receipt Items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReceiptItem"
          }
        },
        "facts": {
          "description": "Array of Fact objects (key-value pairs) that specify information about the purchase.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fact"
          }
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "This action will be activated when user taps on the card."
        },
        "total": {
          "description": "A currency-formatted string that specifies the total purchase price, including all applicable taxes.",
          "type": "string"
        },
        "tax": {
          "description": "A currency-formatted string that specifies the amount of tax applied to the purchase.",
          "type": "string"
        },
        "vat": {
          "description": "A currency-formatted string that specifies the amount of value added tax (VAT) applied to the purchase price.",
          "type": "string"
        },
        "buttons": {
          "description": "Set of actions applicable to the current card.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardAction"
          }
        }
      }
    },
    "ReceiptItem": {
      "description": "An item on a receipt card.",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the line item.",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle to be displayed under the line itemâs title.",
          "type": "string"
        },
        "text": {
          "description": "Description of the line item.",
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/CardImage",
          "description": "Thumbnail image to display next to the line item."
        },
        "price": {
          "description": "A currency-formatted string that specifies the total price of all units purchased.",
          "type": "string"
        },
        "quantity": {
          "description": "A numeric string that specifies the number of units purchased.",
          "type": "string"
        },
        "tap": {
          "$ref": "#/definitions/CardAction",
          "description": "This action will be activated when user taps on the Item bubble."
        }
      }
    },
    "Fact": {
      "description": "Set of key-value pairs. Advantage of this section is that key and value properties will be rendered with default style information with some delimiter between them. So there is no need for developer to specify style information.",
      "type": "object",
      "properties": {
        "key": {
          "description": "Name of the fact.",
          "type": "string"
        },
        "value": {
          "description": "Value of the fact.",
          "type": "string"
        }
      }
    },
    "SignInCard": {
      "description": "A card representing a request to sign in.",
      "type": "object",
      "properties": {
        "text": {
          "description": "Text for signIn request.",
          "type": "string"
        },
        "buttons": {
          "description": "Action to use to perform signIn.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardAction"
          }
        }
      }
    },
    "AudioCard": {
      "description": "A audio card.",
      "type": "object",
      "properties": {
        "aspect": {
          "description": "Aspect ratio of thumbnail/media placeholder, allowed values are \"16:9\" and \"9:16\".",
          "type": "string"
        },
        "title": {
          "description": "Title of the card.",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the card.",
          "type": "string"
        },
        "text": {
          "description": "Text of the card.",
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/ThumbnailUrl",
          "description": "Thumbnail placeholder."
        },
        "media": {
          "description": "Array of media Url objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaUrl"
          }
        },
        "buttons": {
          "description": "Set of actions applicable to the current card.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardAction"
          }
        },
        "shareable": {
          "description": "Is it OK for this content to be shareable with others (default: true).",
          "type": "boolean"
        },
        "autoloop": {
          "description": "Should the client loop playback at end of content (default: true).",
          "type": "boolean"
        },
        "autostart": {
          "description": "Should the client automatically start playback of video in this card (default: true).",
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "description": "Supplementary parameter for this card."
        }
      }
    },
    "ThumbnailUrl": {
      "description": "Object describing a media thumbnail.",
      "type": "object",
      "properties": {
        "url": {
          "description": "URL pointing to an thumbnail to use for media content.",
          "type": "string"
        },
        "alt": {
          "description": "Alt text to display for screen readers on the thumbnail image.",
          "type": "string"
        }
      }
    },
    "MediaUrl": {
      "description": "MediaUrl data.",
      "type": "object",
      "properties": {
        "url": {
          "description": "Url for the media.",
          "type": "string"
        },
        "profile": {
          "description": "Optional profile hint to the client to differentiate multiple MediaUrl objects from each other.",
          "type": "string"
        }
      }
    },
    "AnimationCard": {
      "description": "An animation card (Ex: gif or short video clip).",
      "type": "object",
      "properties": {
        "title": {
          "description": "Title of the card.",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the card.",
          "type": "string"
        },
        "text": {
          "description": "Text of the card.",
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/ThumbnailUrl",
          "description": "Thumbnail placeholder."
        },
        "media": {
          "description": "Array of media Url objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaUrl"
          }
        },
        "buttons": {
          "description": "Set of actions applicable to the current card.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardAction"
          }
        },
        "shareable": {
          "description": "Is it OK for this content to be shareable with others (default: true).",
          "type": "boolean"
        },
        "autoloop": {
          "description": "Should the client loop playback at end of content (default: true).",
          "type": "boolean"
        },
        "autostart": {
          "description": "Should the client automatically start playback of video in this card (default: true).",
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "description": "Supplementary parameter for this card."
        }
      }
    },
    "VideoCard": {
      "description": "A video card.",
      "type": "object",
      "properties": {
        "aspect": {
          "description": "Aspect ratio of thumbnail/media placeholder, allowed values are \"16:9\" and \"9:16\".",
          "type": "string"
        },
        "title": {
          "description": "Title of the card.",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle of the card.",
          "type": "string"
        },
        "text": {
          "description": "Text of the card.",
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/ThumbnailUrl",
          "description": "Thumbnail placeholder."
        },
        "media": {
          "description": "Array of media Url objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaUrl"
          }
        },
        "buttons": {
          "description": "Set of actions applicable to the current card.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CardAction"
          }
        },
        "shareable": {
          "description": "Is it OK for this content to be shareable with others (default: true).",
          "type": "boolean"
        },
        "autoloop": {
          "description": "Should the client loop playback at end of content (default: true).",
          "type": "boolean"
        },
        "autostart": {
          "description": "Should the client automatically start playback of video in this card (default: true).",
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "description": "Supplementary parameter for this card."
        }
      }
    },
    "GeoCoordinates": {
      "description": "GeoCoordinates (entity type: \"https://schema.org/GeoCoordinates\").",
      "type": "object",
      "properties": {
        "elevation": {
          "format": "double",
          "description": "Elevation of the location [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).",
          "type": "number"
        },
        "latitude": {
          "format": "double",
          "description": "Latitude of the location [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "description": "Longitude of the location [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).",
          "type": "number"
        },
        "type": {
          "description": "The type of this object. Always set to GeoCoordinates.",
          "type": "string"
        },
        "name": {
          "description": "Name of the location.",
          "type": "string"
        }
      }
    },
    "MediaEventValue": {
      "description": "Supplementary parameter for media events.",
      "type": "object",
      "properties": {
        "cardValue": {
          "type": "object",
          "description": "Callback parameter specified in the Value field of the MediaCard that originated this event."
        }
      }
    },
    "Place": {
      "description": "Place (entity type: \"https://schema.org/Place\").",
      "type": "object",
      "properties": {
        "address": {
          "type": "object",
          "description": "Address of the place (may be `string` or complex object of type \"PostalAddress\")."
        },
        "geo": {
          "$ref": "#/definitions/GeoCoordinates",
          "description": "A GeoCoordinates object that specifies the geographical coordinates of the place."
        },
        "hasMap": {
          "type": "object",
          "description": "Map to the place (may be `string` (URL) or complex object of type \"Map\")."
        },
        "type": {
          "description": "This object's type. Always set to Place.",
          "type": "string"
        },
        "name": {
          "description": "Name of the place.",
          "type": "string"
        }
      }
    }
  }
}